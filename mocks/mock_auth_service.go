// Code generated by MockGen. DO NOT EDIT.
// Source: auth_service.go
//
// Generated by this command:
//
//	mockgen -source=auth_service.go -destination=../../mocks/mock_auth_service.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entities "github.com/nishiki/backend-go/domain/entities"
	services "github.com/nishiki/backend-go/domain/services"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthService is a mock of AuthService interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
	isgomock struct{}
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// CreateGroup mocks base method.
func (m *MockAuthService) CreateGroup(ctx context.Context, userToken, name, creatorID string) (*entities.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroup", ctx, userToken, name, creatorID)
	ret0, _ := ret[0].(*entities.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGroup indicates an expected call of CreateGroup.
func (mr *MockAuthServiceMockRecorder) CreateGroup(ctx, userToken, name, creatorID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*MockAuthService)(nil).CreateGroup), ctx, userToken, name, creatorID)
}

// CreateUserFromClaims mocks base method.
func (m *MockAuthService) CreateUserFromClaims(ctx context.Context, claims *services.AuthClaims) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserFromClaims", ctx, claims)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserFromClaims indicates an expected call of CreateUserFromClaims.
func (mr *MockAuthServiceMockRecorder) CreateUserFromClaims(ctx, claims any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserFromClaims", reflect.TypeOf((*MockAuthService)(nil).CreateUserFromClaims), ctx, claims)
}

// GetGroupByID mocks base method.
func (m *MockAuthService) GetGroupByID(ctx context.Context, userToken, groupID string) (*entities.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupByID", ctx, userToken, groupID)
	ret0, _ := ret[0].(*entities.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupByID indicates an expected call of GetGroupByID.
func (mr *MockAuthServiceMockRecorder) GetGroupByID(ctx, userToken, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupByID", reflect.TypeOf((*MockAuthService)(nil).GetGroupByID), ctx, userToken, groupID)
}

// GetGroupUsers mocks base method.
func (m *MockAuthService) GetGroupUsers(ctx context.Context, userToken, groupID string) ([]*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupUsers", ctx, userToken, groupID)
	ret0, _ := ret[0].([]*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupUsers indicates an expected call of GetGroupUsers.
func (mr *MockAuthServiceMockRecorder) GetGroupUsers(ctx, userToken, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupUsers", reflect.TypeOf((*MockAuthService)(nil).GetGroupUsers), ctx, userToken, groupID)
}

// GetOIDCConfig mocks base method.
func (m *MockAuthService) GetOIDCConfig(ctx context.Context, clientID string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOIDCConfig", ctx, clientID)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOIDCConfig indicates an expected call of GetOIDCConfig.
func (mr *MockAuthServiceMockRecorder) GetOIDCConfig(ctx, clientID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOIDCConfig", reflect.TypeOf((*MockAuthService)(nil).GetOIDCConfig), ctx, clientID)
}

// GetUserByID mocks base method.
func (m *MockAuthService) GetUserByID(ctx context.Context, userToken, userID string) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, userToken, userID)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockAuthServiceMockRecorder) GetUserByID(ctx, userToken, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockAuthService)(nil).GetUserByID), ctx, userToken, userID)
}

// GetUserFromClaims mocks base method.
func (m *MockAuthService) GetUserFromClaims(ctx context.Context, claims *services.AuthClaims) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserFromClaims", ctx, claims)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserFromClaims indicates an expected call of GetUserFromClaims.
func (mr *MockAuthServiceMockRecorder) GetUserFromClaims(ctx, claims any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserFromClaims", reflect.TypeOf((*MockAuthService)(nil).GetUserFromClaims), ctx, claims)
}

// GetUserGroups mocks base method.
func (m *MockAuthService) GetUserGroups(ctx context.Context, userToken, userID string) ([]*entities.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserGroups", ctx, userToken, userID)
	ret0, _ := ret[0].([]*entities.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserGroups indicates an expected call of GetUserGroups.
func (mr *MockAuthServiceMockRecorder) GetUserGroups(ctx, userToken, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserGroups", reflect.TypeOf((*MockAuthService)(nil).GetUserGroups), ctx, userToken, userID)
}

// ProxyTokenExchange mocks base method.
func (m *MockAuthService) ProxyTokenExchange(ctx context.Context, tokenRequest map[string]any) ([]byte, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProxyTokenExchange", ctx, tokenRequest)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ProxyTokenExchange indicates an expected call of ProxyTokenExchange.
func (mr *MockAuthServiceMockRecorder) ProxyTokenExchange(ctx, tokenRequest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProxyTokenExchange", reflect.TypeOf((*MockAuthService)(nil).ProxyTokenExchange), ctx, tokenRequest)
}

// ValidateToken mocks base method.
func (m *MockAuthService) ValidateToken(ctx context.Context, token string) (*services.AuthClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", ctx, token)
	ret0, _ := ret[0].(*services.AuthClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockAuthServiceMockRecorder) ValidateToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockAuthService)(nil).ValidateToken), ctx, token)
}
