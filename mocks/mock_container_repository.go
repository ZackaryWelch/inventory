// Code generated by MockGen. DO NOT EDIT.
// Source: container_repository.go
//
// Generated by this command:
//
//	mockgen -source=container_repository.go -destination=../../mocks/mock_container_repository.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entities "github.com/nishiki/backend-go/domain/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockContainerRepository is a mock of ContainerRepository interface.
type MockContainerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockContainerRepositoryMockRecorder
	isgomock struct{}
}

// MockContainerRepositoryMockRecorder is the mock recorder for MockContainerRepository.
type MockContainerRepositoryMockRecorder struct {
	mock *MockContainerRepository
}

// NewMockContainerRepository creates a new mock instance.
func NewMockContainerRepository(ctrl *gomock.Controller) *MockContainerRepository {
	mock := &MockContainerRepository{ctrl: ctrl}
	mock.recorder = &MockContainerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContainerRepository) EXPECT() *MockContainerRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockContainerRepository) Create(ctx context.Context, container *entities.Container) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, container)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockContainerRepositoryMockRecorder) Create(ctx, container any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockContainerRepository)(nil).Create), ctx, container)
}

// Delete mocks base method.
func (m *MockContainerRepository) Delete(ctx context.Context, id entities.ContainerID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockContainerRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockContainerRepository)(nil).Delete), ctx, id)
}

// Exists mocks base method.
func (m *MockContainerRepository) Exists(ctx context.Context, id entities.ContainerID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockContainerRepositoryMockRecorder) Exists(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockContainerRepository)(nil).Exists), ctx, id)
}

// GetByGroupID mocks base method.
func (m *MockContainerRepository) GetByGroupID(ctx context.Context, groupID entities.GroupID) ([]*entities.Container, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByGroupID", ctx, groupID)
	ret0, _ := ret[0].([]*entities.Container)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByGroupID indicates an expected call of GetByGroupID.
func (mr *MockContainerRepositoryMockRecorder) GetByGroupID(ctx, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByGroupID", reflect.TypeOf((*MockContainerRepository)(nil).GetByGroupID), ctx, groupID)
}

// GetByID mocks base method.
func (m *MockContainerRepository) GetByID(ctx context.Context, id entities.ContainerID) (*entities.Container, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*entities.Container)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockContainerRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockContainerRepository)(nil).GetByID), ctx, id)
}

// GetContainersWithExpiredFood mocks base method.
func (m *MockContainerRepository) GetContainersWithExpiredFood(ctx context.Context, groupID entities.GroupID) ([]*entities.Container, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainersWithExpiredFood", ctx, groupID)
	ret0, _ := ret[0].([]*entities.Container)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainersWithExpiredFood indicates an expected call of GetContainersWithExpiredFood.
func (mr *MockContainerRepositoryMockRecorder) GetContainersWithExpiredFood(ctx, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainersWithExpiredFood", reflect.TypeOf((*MockContainerRepository)(nil).GetContainersWithExpiredFood), ctx, groupID)
}

// List mocks base method.
func (m *MockContainerRepository) List(ctx context.Context, limit, offset int) ([]*entities.Container, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, limit, offset)
	ret0, _ := ret[0].([]*entities.Container)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockContainerRepositoryMockRecorder) List(ctx, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockContainerRepository)(nil).List), ctx, limit, offset)
}

// Update mocks base method.
func (m *MockContainerRepository) Update(ctx context.Context, container *entities.Container) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, container)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockContainerRepositoryMockRecorder) Update(ctx, container any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockContainerRepository)(nil).Update), ctx, container)
}
