// Code generated by MockGen. DO NOT EDIT.
// Source: object_repository.go
//
// Generated by this command:
//
//	mockgen -source=object_repository.go -destination=../../mocks/mock_object_repository.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entities "github.com/nishiki/backend-go/domain/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockObjectRepository is a mock of ObjectRepository interface.
type MockObjectRepository struct {
	ctrl     *gomock.Controller
	recorder *MockObjectRepositoryMockRecorder
	isgomock struct{}
}

// MockObjectRepositoryMockRecorder is the mock recorder for MockObjectRepository.
type MockObjectRepositoryMockRecorder struct {
	mock *MockObjectRepository
}

// NewMockObjectRepository creates a new mock instance.
func NewMockObjectRepository(ctrl *gomock.Controller) *MockObjectRepository {
	mock := &MockObjectRepository{ctrl: ctrl}
	mock.recorder = &MockObjectRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectRepository) EXPECT() *MockObjectRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockObjectRepository) Create(ctx context.Context, object *entities.Object) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, object)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockObjectRepositoryMockRecorder) Create(ctx, object any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockObjectRepository)(nil).Create), ctx, object)
}

// Delete mocks base method.
func (m *MockObjectRepository) Delete(ctx context.Context, id entities.ObjectID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockObjectRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockObjectRepository)(nil).Delete), ctx, id)
}

// Exists mocks base method.
func (m *MockObjectRepository) Exists(ctx context.Context, id entities.ObjectID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockObjectRepositoryMockRecorder) Exists(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockObjectRepository)(nil).Exists), ctx, id)
}

// GetByCollectionID mocks base method.
func (m *MockObjectRepository) GetByCollectionID(ctx context.Context, collectionID entities.CollectionID) ([]*entities.Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCollectionID", ctx, collectionID)
	ret0, _ := ret[0].([]*entities.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCollectionID indicates an expected call of GetByCollectionID.
func (mr *MockObjectRepositoryMockRecorder) GetByCollectionID(ctx, collectionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCollectionID", reflect.TypeOf((*MockObjectRepository)(nil).GetByCollectionID), ctx, collectionID)
}

// GetByID mocks base method.
func (m *MockObjectRepository) GetByID(ctx context.Context, id entities.ObjectID) (*entities.Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*entities.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockObjectRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockObjectRepository)(nil).GetByID), ctx, id)
}

// GetByType mocks base method.
func (m *MockObjectRepository) GetByType(ctx context.Context, objectType entities.ObjectType) ([]*entities.Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByType", ctx, objectType)
	ret0, _ := ret[0].([]*entities.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByType indicates an expected call of GetByType.
func (mr *MockObjectRepositoryMockRecorder) GetByType(ctx, objectType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByType", reflect.TypeOf((*MockObjectRepository)(nil).GetByType), ctx, objectType)
}

// List mocks base method.
func (m *MockObjectRepository) List(ctx context.Context, limit, offset int) ([]*entities.Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, limit, offset)
	ret0, _ := ret[0].([]*entities.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockObjectRepositoryMockRecorder) List(ctx, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockObjectRepository)(nil).List), ctx, limit, offset)
}

// Update mocks base method.
func (m *MockObjectRepository) Update(ctx context.Context, object *entities.Object) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, object)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockObjectRepositoryMockRecorder) Update(ctx, object any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockObjectRepository)(nil).Update), ctx, object)
}
